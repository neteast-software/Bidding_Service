package ${packageName}.controller;

import java.util.Arrays;
import java.util.List;
import java.io.IOException;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import com.gwise.common.core.constant.SecurityConstants;
import com.gwise.common.core.web.page.PageDomain;
import com.gwise.common.core.web.page.TableSupport;
import com.gwise.system.api.RemoteDynamicRenderingService;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.alibaba.fastjson2.JSONObject;
import com.gwise.common.log.annotation.Log;
import com.gwise.common.log.enums.BusinessType;
import com.gwise.common.security.annotation.RequiresPermissions;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import com.gwise.common.core.web.controller.BaseController;
import com.gwise.common.core.web.domain.AjaxResult;
import com.gwise.common.core.utils.poi.ExcelUtil;
#if($table.crud || $table.sub)
import com.gwise.common.core.web.page.TableDataInfo;
#elseif($table.tree)
#end

/**
 * ${functionName}Controller
 * 
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${businessName}")
public class ${ClassName}Controller extends BaseController
{
    @Resource
    private I${ClassName}Service ${className}Service;
    @Resource
    private RemoteDynamicRenderingService remoteDynamicRenderingService;

    /**
     * 查询${functionName}列表
     */
##    @RequiresPermissions("${permissionPrefix}:list")
    @GetMapping("/list")
#if($table.crud || $table.sub)
    public AjaxResult list(${ClassName} ${className})
    {
        startPage();
        PageDomain pageDomain = TableSupport.buildPageRequest();
        Integer pageNum = pageDomain.getPageNum();
        Integer pageSize = pageDomain.getPageSize();

        List<${ClassName}> list = ${className}Service.getLambdaList(${className});
        //这里需要看需求转换字典等参数

        TableDataInfo dataTable = getDataTable(list);

        JSONObject rendering = remoteDynamicRenderingService.getDynamicRendering("${moduleName}", "${businessName}", "list", SecurityConstants.INNER);
        initPageParams(rendering, dataTable, pageSize, pageNum);
        return success(rendering);
    }
#elseif($table.tree)
    public AjaxResult list(${ClassName} ${className})
    {
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        return success(list);
    }
#end

    /**
     * 导出${functionName}列表
     */
##    @RequiresPermissions("${permissionPrefix}:export")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, ${ClassName} ${className})
    {
        List<${ClassName}> list = ${className}Service.lambdaQuery().list();
        ExcelUtil<${ClassName}> util = new ExcelUtil<${ClassName}>(${ClassName}.class);
        util.exportExcel(response, list, "${functionName}数据");
    }

    /**
     * 获取${functionName}详细信息
     */
##    @RequiresPermissions("${permissionPrefix}:query")
    @GetMapping(value = "/{${pkColumn.javaField}}")
    public AjaxResult getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField})
    {
        return success(${className}Service.getLambdaOne(${pkColumn.javaField}));
    }

    @GetMapping(value = "/toAdd")
    public AjaxResult toAdd()
    {
        JSONObject rendering = remoteDynamicRenderingService.getDynamicRendering("${moduleName}", "${businessName}", "toAdd", SecurityConstants.INNER);
        return success(rendering);
    }


    /**
     * 新增${functionName}
     */
##    @RequiresPermissions("${permissionPrefix}:add")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    public AjaxResult add(@RequestBody ${ClassName} ${className})
    {
        return toAjax(${className}Service.save(${className}));
    }

    @GetMapping(value = "/toModify/{${pkColumn.javaField}}")
    public AjaxResult toModify(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField})
    {
        JSONObject rendering = remoteDynamicRenderingService.getDynamicRendering("${moduleName}", "${businessName}", "toModify", SecurityConstants.INNER);
        // 这里需要注意，如果是需要从其他表读取数据渲染到前端的下拉框，需要在这里单独设置option



        rendering.put("data", ${className}Service.getLambdaOne(${pkColumn.javaField}));
        return success(rendering);
    }


    /**
     * 修改${functionName}
     */
##    @RequiresPermissions("${permissionPrefix}:edit")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping
    public AjaxResult edit(@RequestBody ${ClassName} ${className})
    {
        return toAjax(${className}Service.saveOrUpdate(${className}));
    }

    /**
     * 删除${functionName}
     */
##    @RequiresPermissions("${permissionPrefix}:remove")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
	@DeleteMapping("/{${pkColumn.javaField}s}")
    public AjaxResult remove(@PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s)
    {
        return toAjax(${className}Service.removeByIds(Arrays.asList(${pkColumn.javaField}s)));
    }
}
